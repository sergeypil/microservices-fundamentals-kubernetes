version: '3.7'
networks:
  my_network:
    external: true
services:
  resource-db:
    image: postgres
    ports:
      - "5432:5432"
    networks:
      - ${GLOBAL_NETWORK}
    container_name: resource-db
    restart: always
    environment:
      POSTGRES_PASSWORD: ${RESOURCEDB_PASSWORD}
    volumes:
      - ./resource-service/init.sql:/docker-entrypoint-initdb.d/init.sql
  song-db:
    image: postgres
    ports:
      - "15999:5432"
    networks:
      - ${GLOBAL_NETWORK}
    container_name: song-db
    restart: always
    environment:
      POSTGRES_PASSWORD: ${SONGDB_PASSWORD}
    volumes:
      - ./song-service/init.sql:/docker-entrypoint-initdb.d/init.sql
  storage-db:
    image: postgres
    ports:
      - "16000:5432"
    networks:
      - ${GLOBAL_NETWORK}
    container_name: storage-db
    restart: always
    environment:
      POSTGRES_PASSWORD: ${STORAGEDB_PASSWORD}
    volumes:
      - ./storage-service/init.sql:/docker-entrypoint-initdb.d/init.sql
  localstack:
    image: localstack/localstack
    container_name: local_aws_s3
    restart: always
    ports:
      - "4566:4566"
    networks:
      - ${GLOBAL_NETWORK}
    environment:
      - SERVICES=${LOCALSTACK_SERVICES}
      - DEFAULT_REGION=${LOCALSTACK_DEFAULT_REGION}
    volumes:
      - './docker-config/localstack_data:/tmp/mylocalstack'
      - '/var/run/docker.sock:/var/run/docker.sock'
  rabbitmq:
    image: rabbitmq:3.10.7-management
    container_name: rabbitmq
    ports:
      - 15672:15672
      - 5672:5672
    networks:
      - ${GLOBAL_NETWORK}
  resource-service:
    build: ./resource-service
    volumes:
      - C:/Users/Sergey_Pil/.gradle:/home/gradle/.gradle
    networks:
      - ${GLOBAL_NETWORK}
    container_name: resource-service
    ports:
      - "8080:8080"
    environment:
      SERVER_PORT: 8080
      SPRING_PROFILES_ACTIVE: ${RESOURCESERVICE_SPRING_PROFILE}
    depends_on:
      - resource-db
      - localstack
      - rabbitmq
  song-service:
    build: ./song-service
    volumes:
      - C:/Users/Sergey_Pil/.gradle:/home/gradle/.gradle
    networks:
      - ${GLOBAL_NETWORK}
    container_name: song-service
    ports:
      - "8081:8081"
    environment:
      SERVER_PORT: 8081
      SPRING_PROFILES_ACTIVE: ${SONGSERVICE_SPRING_PROFILE}
    depends_on:
      - song-db
  resource-processor-service:
    build: ./resource-processor
    volumes:
      - C:/Users/Sergey_Pil/.gradle:/home/gradle/.gradle
    networks:
      - ${GLOBAL_NETWORK}
    container_name: resource-processor-service
    ports:
      - "8082:8082"
    environment:
      SERVER_PORT: 8082
      SPRING_PROFILES_ACTIVE: ${RESOURCEPROCESSORSERVICE_SPRING_PROFILE}
    depends_on:
      - rabbitmq
  storage-service:
    build: ./storage-service
    volumes:
      - C:/Users/Sergey_Pil/.gradle:/home/gradle/.gradle
    networks:
      - ${GLOBAL_NETWORK}
    container_name: storage-service
    ports:
      - "8085:8085"
    environment:
      SERVER_PORT: 8085
      SPRING_PROFILES_ACTIVE: ${STORAGESERVICE_SPRING_PROFILE}
    depends_on:
      - storage-db
  resource-api-gateway:
    build: ./resource-api-gateway
    volumes:
      - C:/Users/Sergey_Pil/.gradle:/home/gradle/.gradle
    networks:
      - ${GLOBAL_NETWORK}
    container_name: resource-api-gateway
    ports:
      - "8084:8084"
    environment:
      SERVER_PORT: 8084
      SPRING_PROFILES_ACTIVE: ${RESOURCEAPIGATEWAY_SPRING_PROFILE}
    depends_on:
      - keycloak-server
  discovery-service:
    build: ./discovery-service
    volumes:
      - C:/Users/Sergey_Pil/.gradle:/home/gradle/.gradle
    networks:
      - ${GLOBAL_NETWORK}
    container_name: discovery-service
    ports:
      - "8761:8761"
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - 9090:9090
    volumes:
      - ./docker-config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - ${GLOBAL_NETWORK}
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    volumes:
      - ./docker-config/grafana-provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./docker-config/grafana-provisioning/dashboards:/etc/grafana/provisioning/dashboards
    networks:
      - ${GLOBAL_NETWORK}
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.14
    container_name: elasticsearch
    volumes:
      - ./docker-config/elk/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - ./docker-volumes/esdata01:/var/lib/elasticsearch/data
    networks:
      - ${GLOBAL_NETWORK}
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      BOOTSTRAP_MEMORY_LOCK: "true"
      ES_JAVA_OPTS: -Xms512m -Xmx1024m
      bootstrap.system_call_filter: false
      discovery.type: single-node
    ulimits:
      memlock:
        soft: -1
        hard: -1
  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.14
    container_name: logstash
    command: -f /etc/logstash/conf.d/
    volumes:
      - ./docker-config/logstash/:/etc/logstash/conf.d/
      - ./docker-volumes/logstashdata01:/var/lib/logstash/data
    networks:
      - ${GLOBAL_NETWORK}
    ports:
      - "5044:5044"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    depends_on:
      - elasticsearch
    links:
      - elasticsearch
  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.14
    container_name: kibana
    volumes:
      - ./docker-config/elk/kibana.yml:/usr/share/kibana/config/kibana.yml
      - ./docker-volumes/kibanadata:/var/lib/kibana/data
    networks:
      - ${GLOBAL_NETWORK}
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    links:
      - elasticsearch
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    networks:
      - ${GLOBAL_NETWORK}
    ports:
      - "9411:9411"
    environment:
      - STORAGE_TYPE=mem
      - MYSQL_HOST=mysql
      - ZIPKIN_LOG_LEVEL=DEBUG
      - JAVA_OPTS=-Dlogging.level.zipkin=DEBUG
  keycloak-server:
    build: ./jwt-auth-server
    container_name: keycloak-server
    networks:
      - ${GLOBAL_NETWORK}
    volumes:
      - ./jwt-auth-server/src/main/resources/mytest.jks:/app/src/main/resources/mytest.jks
    ports:
      - "8086:8086"
    environment:
      SERVER_PORT: 8086